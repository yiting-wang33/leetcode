class Solution {
    
    private Map<Integer,Set<Integer>> Graph(int V, int[][] edges) {
        Map<Integer,Set<Integer>> g = new HashMap<Integer,Set<Integer>>();
        for (int i = 0;i<V;i++) {
            g.put(i,new HashSet<Integer>());
        }
        for (int i = 0;i<edges.length;i++) {
            int v = edges[i][0];
            int u = edges[i][1];
            g.get(v).add(u);
            g.get(u).add(v);
        }
        return g;
    }
    
    public boolean validTree(int n, int[][] edges) {
        if (edges.length != n-1) return false;
        if (n == 0) return false;
        Map<Integer,Set<Integer>> g = Graph(n,edges);
        
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> hash = new HashSet<>();
        
        queue.offer(0);
        hash.add(0);
        while (!queue.isEmpty()) {
            int v = queue.poll();
            for (Integer neighbor : g.get(v)) {
                if (hash.contains(neighbor)) {
                    continue;
                }
                hash.add(neighbor);
                queue.offer(neighbor);
            }
        }
        return (hash.size() == n);
    }
}
